#!/usr/bin/env node

var StreamStash = require('../')
  , util = require('util')
  , path = require('path')
  , fs = require('fs')
  , dashdash = require('dashdash')
  , sdc = require('statsd-client')
  , plugins = {
        inputs: {}
      , outputs: {}
    }

//TODO: We had -v[vv]
//TODO: Add a thing to print build in plugins

//process.stdin.resume()

var optParser = new dashdash.Parser({
    options: [
        {
            names: ['help', 'h']
          , type: 'bool'
          , help: 'Print this help and exit'
        }
      , {
            names: ['kill-timeout', 'k']
          , type: 'number'
          , default: 30
          , help: 'The amount of time to wait for a shutdown before forcing an exit, default 30 seconds'
        }
    ]
})

try {
    var opts = optParser.parse(process.argv)
} catch (error) {
    printHelp(error.message)
}

if (opts.help) {
    printHelp()
}

Object.keys(StreamStash.inputs).forEach(function (plugin) {
    plugins.inputs[plugin.toLowerCase()] = StreamStash.inputs[plugin]
})

Object.keys(StreamStash.outputs).forEach(function (plugin) {
    plugins.outputs[plugin.toLowerCase()] = StreamStash.outputs[plugin]
})

var logger = new StreamStash.Logger({ level: StreamStash.Logger.LEVEL.INFO })
  , streamStash = new StreamStash({ logger: logger })

// Build up our globals, helpers for basic usage of StreamStash
global.StreamStash = StreamStash
global.streamStash = streamStash
global.logger = logger

/**
 * Adds a filter to the filter chain
 * TODO: Document the filter function args
 *
 * @param {Function} func A filter function to add
 */
global.addFilter = function (func) {
    streamStash.addFilter(func)
}

/**
 * Adds an input plugin to be used
 *
 * @param {String|Function} name Either a built in input name, path to an input plugin, or constructor
 * @param {Object} [options] Configuration options for the plugin, refer to the plugin for more information
 */
global.addInputPlugin = function (name, options) {
    var ctor = loadPlugin('inputs', name)
        , baseOptions = {
            streamStash: streamStash
          , EventContainer: StreamStash.EventContainer
          , logger: logger
        }

    streamStash.addInputPlugin(new ctor(util._extend(baseOptions, options)))
}

/**
 * Adds an output plugin to be used
 *
 * @param {String|Function} name Either a built in output name, path to an output plugin, or constructor
 * @param {Object} [options] Configuration options for the plugin, refer to the plugin for more information
 */
global.addOutputPlugin = function (name, options) {
    var ctor = loadPlugin('outputs', name)
      , baseOptions = {
            streamStash: streamStash
          , logger: logger
        }

    streamStash.addOutputPlugin(new ctor(util._extend(baseOptions, options)))
}

// Setup config files
var configPaths = opts._args
  , files = []
  , pathRegex = new RegExp('\\.js$')

try {
    configPaths.forEach(function (testPath) {
        files = files.concat(lookupFiles(testPath))
    })
} catch (error) {
    var useError

    if (error.code === 'ENOENT') {
        useError = 'No such file or directory: ' + error.path
    } else {
        useError = error.message
    }

    console.error(useError)
    process.exit(1)
}

if (files.length === 0) {
    printHelp('No config files or directories were provided')
}

files.forEach(function (filePath) {
    require(path.resolve(filePath))
})

// Set up a signal handler for SIGINT to gracefully shutdown
var killTimeout = opts.kill_timeout
  , killTimer = false

process.on('SIGINT', function () {
    logger.info('Got SIGINT, starting shutdown')
    attempt_shutdown('SIGINT after shutdown request')
})

process.on('SIGTERM', function () {
    logger.info('Got SIGTERM, starting shutdown')
    attempt_shutdown('SIGTERM after shutdown request')
})

function attempt_shutdown (force) {
    var forceKill = function (reason) {
        logger.error('Forcefully exiting. ' + reason)
        process.exit(1)
    }

    if (killTimer) {
        if (force) {
            forceKill(force)
        }
        return
    }

    killTimer = setTimeout(
        function () {
            forceKill('Shutdown timeout after ' + killTimeout + ' seconds')
        }
      , killTimeout * 1000
    )

    logger.info('Forceful exit in ' + killTimeout + ' seconds')

    streamStash.stop()
}

streamStash.once('stopped', function () {
    logger.info('Exited gracefully')
    clearTimeout(killTimer)
    process.exit(0)
})

// Start it up
streamStash.start()

var lastTotal = 0
  , lastTenSecTotal = 0
  , perSec = 0
  , perTenSec = 0
  , maxPerSec = 0

process.on('uncaughtException', function (error) {
    logger.error('Uncaught exception, shutting down:')
    logger.error(error.stack || error)
    attempt_shutdown()
})

var gauge
if (typeof process.env.STATSD_HOST === 'undefined' ||
        typeof process.env.STATSD_PORT === 'undefined' ||
        typeof process.env.STATSD_PREFIX === 'undefined') {
    gauge = function gauge() {}
} else {
    var sdc_client = new sdc({host: process.env.STATSD_HOST, port: parseInt(process.env.STATSD_PORT)})

    gauge = function gauge(metric, value) {
        sdc_client.gauge(metric, value)
    }
}

setInterval(function () {
    perSec = (streamStash.stats.events.total - lastTotal)

    if (perSec > maxPerSec) {
        maxPerSec = perSec
    }

    lastTotal = streamStash.stats.events.total
}, 1000)

setInterval(function () {
    perTenSec = (streamStash.stats.events.total - lastTenSecTotal)

    gauge(process.env.STATSD_PREFIX + '.processedPerTenSec', perTenSec)
    gauge(process.env.STATSD_PREFIX + '.processedPerSec', perSec)

    logger.info(
        'Processing: ' + streamStash.stats.events.processing +
            ', Total: ' + streamStash.stats.events.total +
            ', Current/s: ' + perSec + '/s' +
            ', Processed: ' + perTenSec + '/10s' +
            ', Max/s: ' + maxPerSec + '/s'
    )

    lastTenSecTotal = streamStash.stats.events.total
}, 10000)

/**
 * Tries to load a plugin
 *
 * @param {String} type Either `inputs` or `outputs` for whichever type is being loaded
 * @param {String|Function} name Either an built in plugin name, a path to a plugin to load, or a constructor
 *
 * @returns {Function} A constructor for the plugin
 */
function loadPlugin (type, name) {
    var ctor
      , useName = name.toLowerCase()

    //If we got a function in the first place, use it
    if (typeof name === 'function') {
        return name

    //Look for our own reporter first
    } else if (plugins[type][useName]) {
        ctor = plugins[type][useName]

    //See if it's an external module
    } else {
        try {
            ctor = require(name)
        } catch (err) {
            printHelp('Invalid ' + type.slice(0, -1) + ' plugin "' + name + '"')
        }
    }

    return ctor
}

/**
 * Looks up files within a path, optionally recursively
 *
 * @param {String} filePath The file path to search
 *
 * @returns {Array.<String>} An array of files found within filePath
 */
function lookupFiles (filePath) {
    var found = []
      , useFilePath = fs.existsSync(filePath) ? filePath : filePath + '.js'

    var stat = fs.statSync(useFilePath)
    if (stat.isFile()) {
        return [useFilePath]
    }

    fs.readdirSync(useFilePath).forEach(function (file) {
        var useFile = path.join(useFilePath, file)
          , stat = fs.statSync(useFile)

        if (stat.isDirectory()) {
            found = found.concat(lookupFiles(useFile))
            return
        }

        if (!stat.isFile() || !pathRegex.test(useFile) || path.basename(useFile)[0] == '.') {
            return
        }

        found.push(useFile)
    })

    return found
}

/**
 * Prints the help and optionally an error
 *
 * @param {String} [error] An error message to print before the help
 */
function printHelp (error) {
    var status = 0

    console.log()

    if (error) {
        console.error('ERROR:', error)
        console.log()
        status = 1
    }
    var width = (process.stdout.getWindowSize) ? process.stdout.getWindowSize()[0] : 120

    console.log('Usage: streamstash [OPTIONS] [<config file or directory>...]\n')
    console.log('Options:')
    console.log(optParser.help({ includeEnv: true, maxCol: width }).trimRight())

    process.exit(status)
}
